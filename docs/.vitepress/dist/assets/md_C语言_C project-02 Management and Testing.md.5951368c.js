import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.e90f0c97.js";const g=JSON.parse('{"title":"C project-02 Management and Testing","description":"","frontmatter":{},"headers":[],"relativePath":"md/计算机系统/C project-02 Management and Testing.md","filePath":"md/计算机系统/C project-02 Management and Testing.md"}'),l={name:"md/计算机系统/C project-02 Management and Testing.md"},o=e(`<img src="https://pic.imgdb.cn/item/64fdc2b6661c6c8e543d9600.png" alt="C.png"><h1 id="c-project-02-management-and-testing" tabindex="-1">C project-02 Management and Testing <a class="header-anchor" href="#c-project-02-management-and-testing" aria-label="Permalink to &quot;C project-02 Management and Testing&quot;">​</a></h1><blockquote><p>难度系数：中等</p><p>首先，恭喜你👋👋👋，你已经踏出做项目的第一步了，接下来，请继续为这个计算器添加一些功能。</p><p>作为一个计算器🧮🧮🧮，最重要的功能就是计算，另外很重要的一部分就是组织和管理这个项目，接下来，你将完成计算器部分计算功能，学习如何组织和管理这个项目，同时，为了判断计算器的正确性，你将要学习如何测试你的计算器。💪💪💪</p></blockquote><h2 id="part-0-计算" tabindex="-1"><strong>Part 0 计算</strong> <a class="header-anchor" href="#part-0-计算" aria-label="Permalink to &quot;**Part 0 计算**&quot;">​</a></h2><p>在C-project01，你已经完成了中缀表达式转后缀表达式，现在，就利用后缀表达式计算出结果。</p><h3 id="任务" tabindex="-1"><strong>任务</strong> <a class="header-anchor" href="#任务" aria-label="Permalink to &quot;**任务**&quot;">​</a></h3><ul><li>将输入的表达式转为后缀表达式后，计算表达式结果</li><li>计算支持<code>+ - * / ()</code>,支持整数和浮点数</li><li>简单描述一下你的实现思路</li></ul><h3 id="提示" tabindex="-1"><strong>提示</strong> <a class="header-anchor" href="#提示" aria-label="Permalink to &quot;**提示**&quot;">​</a></h3><ul><li>运用栈，结构体</li><li>了解一下<code>atoi()</code>函数，<code>atof()</code>函数</li><li>注意识别错误表达式，以及0作为分母</li><li>注意忽略表达式中的空格，可以了解一下<code>strtok()</code>函数</li></ul><h2 id="part-1-交互⌨️⌨️⌨️" tabindex="-1"><strong>Part 1 交互⌨️⌨️⌨️</strong> <a class="header-anchor" href="#part-1-交互⌨️⌨️⌨️" aria-label="Permalink to &quot;**Part 1 交互⌨️⌨️⌨️**&quot;">​</a></h2><p>现在，你的计算器只能计算一条表达式，然后程序就结束了，如果想要计算多条表达式，那么只能反复运行程序，太繁琐了，现在，来升级一下你的计算器，让他可以计算多条表达式，同时，让你的计算器成为一个可以通过命令行交互的计算器（像shell，python一样）。😊😊😊</p><h3 id="任务-1" tabindex="-1"><strong>任务</strong> <a class="header-anchor" href="#任务-1" aria-label="Permalink to &quot;**任务**&quot;">​</a></h3><ul><li>为你的计算器提供命令行交互，你的计算器一直运行着，除非输入<code>quit</code>（程序崩溃或<code>ctrl+c</code>终止进程例外），每条表达式以键入<code>enter</code>结束，计算器计算结果，输出，接着等待下一个操作。 <ul><li><div class="language-Plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Plain</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">linux&gt; ./cproject</span></span>
<span class="line"><span style="color:#e1e4e8;">interaction&gt; 2+4</span></span>
<span class="line"><span style="color:#e1e4e8;">result&gt; 6</span></span>
<span class="line"><span style="color:#e1e4e8;">interaction&gt; 2+4*8</span></span>
<span class="line"><span style="color:#e1e4e8;">result&gt; 34</span></span>
<span class="line"><span style="color:#e1e4e8;">interaction&gt; quit</span></span>
<span class="line"><span style="color:#e1e4e8;">linux&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">linux&gt; ./cproject</span></span>
<span class="line"><span style="color:#24292e;">interaction&gt; 2+4</span></span>
<span class="line"><span style="color:#24292e;">result&gt; 6</span></span>
<span class="line"><span style="color:#24292e;">interaction&gt; 2+4*8</span></span>
<span class="line"><span style="color:#24292e;">result&gt; 34</span></span>
<span class="line"><span style="color:#24292e;">interaction&gt; quit</span></span>
<span class="line"><span style="color:#24292e;">linux&gt;</span></span></code></pre></div></li></ul></li><li>为你的计算器提供<code>help</code>命令，当输入<code>help</code>时，打印计算器的操作帮助信息。</li><li>你的计算器要支持一键删除，例如，当输入表达式时，觉得表达式错了，可以键入<code>ctrl+u</code>清除当前行</li><li>你的计算器要支持保留历史记录，像shell一样，通过<code>↑,↓</code>,可以查看历史命令(表达式)</li><li>你的计算器可以接受命令行参数<code>-t &lt;file&gt;</code>,<code>-t</code>表示你的计算器为后续测试作准备，计算器把每条表达式的结果输入到以<code>-t</code>参数为名字的文件中。 <ul><li><div class="language-Plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Plain</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">linux&gt; ./cproject -t result.txt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">linux&gt; ./cproject -t result.txt</span></span></code></pre></div></li><li><p>result.txt内容格式</p></li><li><div class="language-Plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Plain</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">243</span></span>
<span class="line"><span style="color:#e1e4e8;">456</span></span>
<span class="line"><span style="color:#e1e4e8;">456</span></span>
<span class="line"><span style="color:#e1e4e8;">6</span></span>
<span class="line"><span style="color:#e1e4e8;">7</span></span>
<span class="line"><span style="color:#e1e4e8;">23</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">243</span></span>
<span class="line"><span style="color:#24292e;">456</span></span>
<span class="line"><span style="color:#24292e;">456</span></span>
<span class="line"><span style="color:#24292e;">6</span></span>
<span class="line"><span style="color:#24292e;">7</span></span>
<span class="line"><span style="color:#24292e;">23</span></span></code></pre></div></li></ul></li><li>尝试改变一下提示字符串的颜色</li></ul><h3 id="提示-1" tabindex="-1"><strong>提示</strong> <a class="header-anchor" href="#提示-1" aria-label="Permalink to &quot;**提示**&quot;">​</a></h3><ul><li>了解<code>readline</code>库，尝试使用<code>readline</code>库</li><li>小心内存泄漏</li><li>了解一下什么是命令行选项，什么是命令行参数</li><li>了解一下<code>getopt</code>函数</li></ul><h2 id="part-2-使用makefile" tabindex="-1"><strong>Part 2 使用Makefile</strong> <a class="header-anchor" href="#part-2-使用makefile" aria-label="Permalink to &quot;**Part 2 使用Makefile**&quot;">​</a></h2><p>作为一个项目，把全部代码放在一个文件中，太臃肿了，引入多文件，将项目划分成多个模块，但是，项目编译时，需要输入很多命令，同时，假如一个文件的一个小地方修改了，又要寻找与这个修改文件相关联的其他文件，重新编译链接，十分麻烦，怎么样高效率构建项目呢，尝试使用<code>makefile</code>.</p><h3 id="任务-2" tabindex="-1"><strong>任务</strong> <a class="header-anchor" href="#任务-2" aria-label="Permalink to &quot;**任务**&quot;">​</a></h3><ul><li><code>makefile</code>在编译整个项目中充当什么角色，有什么用，谈谈你的理解🤔🤔🤔</li><li>将计算器划分为多个文件，并利用<code>makefile</code>编译</li></ul><h3 id="提示-2" tabindex="-1"><strong>提示</strong> <a class="header-anchor" href="#提示-2" aria-label="Permalink to &quot;**提示**&quot;">​</a></h3><ul><li><a href="https://www.ruanyifeng.com/blog/2015/02/make.html" target="_blank" rel="noreferrer">make命令教程</a></li><li><a href="https://seisman.github.io/how-to-write-makefile/overview.html" target="_blank" rel="noreferrer">跟我一起写makefile</a></li><li><a href="https://www.gnu.org/software/make/manual/make.html" target="_blank" rel="noreferrer">GUN make</a></li></ul><h2 id="part-3-使用git" tabindex="-1"><strong>Part 3 使用git</strong> <a class="header-anchor" href="#part-3-使用git" aria-label="Permalink to &quot;**Part 3 使用git**&quot;">​</a></h2><p>每次在计算器上添加功能，都要修改代码，假如不小心修改的时候，整个项目被修改得面目全非，也跑不起来，而你想回到修改前的样子，怎么办呢，使用<code>git</code>管理你的项目。</p><h3 id="任务-3" tabindex="-1"><strong>任务</strong> <a class="header-anchor" href="#任务-3" aria-label="Permalink to &quot;**任务**&quot;">​</a></h3><ul><li>简单描述一下，工作区，暂存区，仓库区是什么</li><li>创建<code>git</code>仓库，完成一次提交，把项目代码提交到本地仓库上</li><li>使用<code>github</code>,注册<code>github</code>账号，创建<code>github</code>仓库，把项目代码放在<code>github</code>仓库上</li><li>创建一个分支，<code>part4</code>的测试功能在该分支下完成，完成后，合并到主分支上</li></ul><h3 id="提示-3" tabindex="-1"><strong>提示</strong> <a class="header-anchor" href="#提示-3" aria-label="Permalink to &quot;**提示**&quot;">​</a></h3><ul><li><a href="https://www.runoob.com/git/git-tutorial.html" target="_blank" rel="noreferrer">Git 教程 | 菜鸟教程 (runoob.com)</a></li><li><a href="https://recruit.glimmer.org.cn/md/%E6%97%A5%E5%B8%B8%E5%9F%BA%E7%A1%80/%E6%97%A5%E5%B8%B8-06%EF%BC%9A%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86.html" target="_blank" rel="noreferrer">日常-06：代码管理 | 微光招新 (glimmer.org.cn)</a></li><li><a href="https://learngitbranching.js.org/?locale=zh_CN" target="_blank" rel="noreferrer">学习git小游戏</a></li><li>注意合并冲突</li></ul><h2 id="part-4-测试" tabindex="-1"><strong>part 4 测试</strong> <a class="header-anchor" href="#part-4-测试" aria-label="Permalink to &quot;**part 4 测试**&quot;">​</a></h2><p>如何检测计算器的正确性呢，可以通过测试检测计算器的正确性，在这部分，尝试一下对你的计算器进行测试吧。(加油，最后一部分了🫡🫡🫡)</p><h3 id="任务-4" tabindex="-1"><strong>任务</strong> <a class="header-anchor" href="#任务-4" aria-label="Permalink to &quot;**任务**&quot;">​</a></h3><ul><li>了解软件测试</li><li>了解差分测试，使用差分测试检测你的计算器的正确性</li><li>使用我们给予的测试用例，使用差分测试检测计算器的正确性</li><li>测试用例，遇到错误的表达式，计算器应该识别出来，并输出提示用户，表达式有误 <ul><li><div class="language-Plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Plain</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">2*3-1 + 2</span></span>
<span class="line"><span style="color:#e1e4e8;">1   +  4 -2* 2</span></span>
<span class="line"><span style="color:#e1e4e8;">( 2  +3)/  5</span></span>
<span class="line"><span style="color:#e1e4e8;">(2147483647-2147483646)*(12345678-12345670)</span></span>
<span class="line"><span style="color:#e1e4e8;">(3+4)/(5-5)</span></span>
<span class="line"><span style="color:#e1e4e8;">()*5*6*7</span></span>
<span class="line"><span style="color:#e1e4e8;">1+a+3*4+1890/7895</span></span>
<span class="line"><span style="color:#e1e4e8;">(987.5 -568.27)*((998-997)+(2/(2*1))-1)</span></span>
<span class="line"><span style="color:#e1e4e8;">((8+2)*3)-(4/2)+7</span></span>
<span class="line"><span style="color:#e1e4e8;">((3+2)*4)-((6-1)/2)</span></span>
<span class="line"><span style="color:#e1e4e8;">-((8+2)*3)-(4/2)+7</span></span>
<span class="line"><span style="color:#e1e4e8;">-8*2-3+2-2*(-8)</span></span>
<span class="line"><span style="color:#e1e4e8;">((10-4)*(3+2)/(7-1))</span></span>
<span class="line"><span style="color:#e1e4e8;">(67.5555-67.4444)*(478.9847-476.9847)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">2*3-1 + 2</span></span>
<span class="line"><span style="color:#24292e;">1   +  4 -2* 2</span></span>
<span class="line"><span style="color:#24292e;">( 2  +3)/  5</span></span>
<span class="line"><span style="color:#24292e;">(2147483647-2147483646)*(12345678-12345670)</span></span>
<span class="line"><span style="color:#24292e;">(3+4)/(5-5)</span></span>
<span class="line"><span style="color:#24292e;">()*5*6*7</span></span>
<span class="line"><span style="color:#24292e;">1+a+3*4+1890/7895</span></span>
<span class="line"><span style="color:#24292e;">(987.5 -568.27)*((998-997)+(2/(2*1))-1)</span></span>
<span class="line"><span style="color:#24292e;">((8+2)*3)-(4/2)+7</span></span>
<span class="line"><span style="color:#24292e;">((3+2)*4)-((6-1)/2)</span></span>
<span class="line"><span style="color:#24292e;">-((8+2)*3)-(4/2)+7</span></span>
<span class="line"><span style="color:#24292e;">-8*2-3+2-2*(-8)</span></span>
<span class="line"><span style="color:#24292e;">((10-4)*(3+2)/(7-1))</span></span>
<span class="line"><span style="color:#24292e;">(67.5555-67.4444)*(478.9847-476.9847)</span></span></code></pre></div></li></ul></li></ul><h3 id="提示-4" tabindex="-1">提示 <a class="header-anchor" href="#提示-4" aria-label="Permalink to &quot;提示&quot;">​</a></h3><ul><li>可以尝试编写测试代码来进行测试(仅供参考） <ul><li><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">system</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;make&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(ret </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">system</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./interaction -t result.txt &lt; test.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;">(ret </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">system</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;diff -y -w test.txt answer.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">system</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;make&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(ret </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">system</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./interaction -t result.txt &lt; test.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;">(ret </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">system</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;diff -y -w test.txt answer.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ul></li><li>了解一下<code>diff</code>工具</li><li>了解一下<code>system</code>函数，<code>assert</code>函数，<code>popen</code>函数</li><li>了解一下<code>shell</code>输入，输出重定向</li></ul><h2 id="需要提交的内容及要求" tabindex="-1"><strong>需要提交的内容及要求</strong> <a class="header-anchor" href="#需要提交的内容及要求" aria-label="Permalink to &quot;**需要提交的内容及要求**&quot;">​</a></h2><ul><li>可以描述一下解题过程中遇到的困难以及如何解决的，描述一下解题思路</li><li>存放项目的<code>github</code>仓库链接，仓库上的内容应该是添加完交互功能和使用<code>makefile</code>的项目内容</li><li>添加交互功能后，计算器运行截图</li><li>使用命令行参数后，计算器运行截图</li><li><code>makefile</code>运行结果截图</li><li>使用<code>git</code>时相应截图，例如，提交，创建分支，转换分支，合并等等</li><li>测试用例运行结果截图</li><li>用自己的想法回答题目问题</li><li>良好的代码习惯（加分🥰）</li><li>请提交PDF文档</li></ul><h2 id="本题提交方式" tabindex="-1"><strong>本题提交方式</strong> <a class="header-anchor" href="#本题提交方式" aria-label="Permalink to &quot;**本题提交方式**&quot;">​</a></h2><blockquote><p>收件邮箱：<a href="mailto:glimmer401@outlook.com" target="_blank" rel="noreferrer">glimmer401@outlook.com</a></p><p>主题格式： 学号-姓名-考核-Cproject-02</p><p>主题示例：2024090101012-张三-考核-Cproject-02</p></blockquote><h2 id="出题人联系方式" tabindex="-1"><strong>出题人联系方式</strong> <a class="header-anchor" href="#出题人联系方式" aria-label="Permalink to &quot;**出题人联系方式**&quot;">​</a></h2><blockquote><p>QQ:239148349</p><p>邮箱：<a href="mailto:LLP_PLL@outlook.com" target="_blank" rel="noreferrer">LLP_PLL@outlook.com</a></p></blockquote>`,39),t=[o];function p(r,c,i,d,h,y){return a(),n("div",null,t)}const E=s(l,[["render",p]]);export{g as __pageData,E as default};
